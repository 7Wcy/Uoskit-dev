#!/bin/bash

# 脚本版本号
SCRIPT_VERSION="3.3.3"

# 获取架构信息
architecture=$(lscpu | awk '/Architecture/ {print $2}')
# 获取系统版本号
version=$(grep 'MinorVersion' /etc/os-version | cut -d'=' -f2)

# 主机地址
IP_NAME=$(whoami)
HOME_DIR=$(eval echo ~$IP_NAME)

# 网络ip地址判断函数
INTERNET_CONNECT() {
    # 获取默认网关
    DEFAULT_GATEWAY=$(ip route | grep default | awk '{print $3}')
    
    # 检查是否有网络连接
    if [ -n "$DEFAULT_GATEWAY" ]; then

        # 定义有线网接口数组
        wired_interfaces=("eno1" "eth0")
        # 循环检查有线网接口
        for interface in "${wired_interfaces[@]}"; do
            if ip link show "$interface" >/dev/null 2>&1; then
                # 获取有线网接口的 IP 地址
                if [[ -n $(ip addr show "$interface" | grep "state UP") ]]; then
                    IP_ADDRESS=$(ip addr show "$interface" | awk '/inet / {print $2}' | cut -d/ -f1)
                    IPNAME_ADDRESS="$IP_NAME@$IP_ADDRESS"
                    return
                fi
            fi
        done

        # 定义无线网接口数组
        wireless_interfaces=("wlan0" "wlp1s0" "wlp1s1")
        # 循环检查无线网接口
        for interface in "${wireless_interfaces[@]}"; do
            if ip link show "$interface" >/dev/null 2>&1; then
                # 获取无线网接口的 IP 地址
                if [[ -n $(ip addr show "$interface" | grep "state UP") ]]; then
                    IP_ADDRESS=$(ip addr show "$interface" | awk '/inet / {print $2}' | cut -d/ -f1)
                    IPNAME_ADDRESS="$IP_NAME@$IP_ADDRESS"
                    return
                fi
            fi
        done
    fi

    IPNAME_ADDRESS="-- Not connected --"
}

INTERNET_CONNECT  

# 帮助函数
show_help() {
    echo "主机地址:" $IPNAME_ADDRESS
    echo ""
    echo "常用开发功能:"
    echo "  -l       添加源"
    echo "  -s       安装开发人员需要的软件包"
    echo "  -c       克隆项目"
    echo "  -m       编译安装源码"
    echo "  -mc      只进行 debug 编译，不安装"
    echo "  -d       进行出包"
    echo ""
    echo "辅助功能:"
    echo "  -h       显示帮助信息"
    echo "  -a       进行激活操作"
    echo "  -e       导出此系统的全量日志"
    echo "  -p       下载指定包或全量包"
    echo "  -r       重启或者注销系统"
    echo "  -i       安装当前目录下所有deb包"
    echo "  -ssh     配置ssh公钥信息"
    echo "  -dbus    dbus接口调用"
    echo "  -v       查看脚本版本号"
    echo "  ..."
    echo "系统环境:$XDG_SESSION_TYPE 架构:$architecture 版本:$version "
}

# 错误退出函数
error_exit() {
    echo "$1" >&2
    exit 1
}

# 运行cmake命令
run_cmake() {
    local build_type=$1
    sudo cmake -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=$build_type ..
    [ $? -ne 0 ] && error_exit "命令 'sudo cmake -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=$build_type ..' 执行失败。编译中止。"
}

# debug编译安装函数
debug_check() {
    if [ ! -d "debian" ]; then
        error_exit "当前不是源码文件！请在源码文件中运行脚本编译、安装、出包等操作！"
    fi

    if [ ! -d "build" ]; then
        mkdir -p build
    fi

    cd build

    if [ "$only_Run_cmake" = "true" ]; then
        run_cmake "Debug"
    else
        run_cmake "Debug"
        sudo make install -j8
        [ $? -ne 0 ] && error_exit "命令 'sudo make install -j8' 执行失败。安装中止。"
    fi
}

# 安装软件函数
install_software() {
    sudo apt install qtcreator qtbase5-dev qt5-default gdb gcc g++ cmake make git openssh-server devscripts d-feet systemd-coredump -y
    if [ $? -eq 0 ]; then
        echo ""
        echo "软件安装完毕..."
        echo ""
        echo "正在打开openssh-server --- enbale..."
        echo ""
        sudo systemctl enable ssh
        sudo service ssh restart
        echo ""
        echo "开发环境安装完成！"
    else
        echo "开发环境安装出现问题，请检查错误信息。"
    fi
}

#检查源配置是否正确函数
check_sources() {
    echo "源已配置完成，是否更新？(yes/no)"
    read user_response
    while [[ ! $user_response =~ ^(yes|no|y|n)$ ]]; do
        echo "请输入正确的选项：yes 或 no (y/n)"
        read user_response
    done

    if [[ "$user_response" =~ ^(yes|y)$ ]]; then
        sudo apt update
    else
        echo "脚本结束。"
        exit 0
    fi
}

# 检查是否提供参数，包括 --help 选项和 -h 参数的处理
if [ $# -eq 0 ] || [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
    show_help
    exit 0
fi

# 解析参数选项
while [ "$#" -gt 0 ]; do
    case "$1" in
        "make" | "-m" | "-mc")
            operation="make"
            only_Run_cmake="false"

            if [ "$1" = "-mc" ]; then
                only_Run_cmake="true"
            fi
            ;;
        "software" | "-s")
            operation="software"
            ;;
        "list" | "-l")
            operation="list"
            ;;
        "activation" | "-a")
            operation="activation"
            ;;
        "restart" | "-r")
            operation="restart"
            ;;
        "install" | "-i")
            operation="install"
            ;;
        "clone" | "-c")
            operation="clone"
            ;;
        "dpkg" | "-d")
            operation="dpkg"
            ;;
        "package" | "-p")
            operation="package"
            ;;
        "export" | "-e")
            operation="export"
            ;;
        "-ssh")
            operation="ssh"
            ;;
        "-dbus")
            operation="dbus"
            ;;
        "version" | "-v")
            operation="version"
            ;;
        *)
            show_help
            error_exit
            ;;
    esac
    shift
done

case "$operation" in
    "make")	 
        debug_check
        echo "已完成安装。"
        uoskit restart
        ;;
    "software")
        echo "请确认 开发源 是否配置完成？(yes/no)"
        read confirm_sources
        while [[ ! $confirm_sources =~ ^(yes|no|y|n)$ ]]; do
            echo "请输入正确的选项：yes 或 no (y/n)"
            read confirm_sources
        done

        if [[ "$confirm_sources" =~ ^(yes|y)$ ]]; then
            install_software
        else
            uoskit list
        fi
        ;;
    "clone")
        bash /usr/bin/kit_src/clone_project
        ;;
    "list")
        echo "请选择机型：1042、1043、1050、1060、M900，或手动输入yes/y修改源。"
        read -p "请输入您的选择：" vim_sources
        while [[ ! $vim_sources =~ ^(1042|1043|1050|1060|M900|yes|y)$ ]]; do
            echo ""
            echo "请输入正确的选项：1042、1043、1050、1060、M900、yes/y"
            read -p "请确认：" vim_sources
        done
        
        update_sources() {
            echo "备份当前源到桌面..."
            cat /etc/apt/sources.list >> ~/Desktop/备份源.txt
            sudo sh -c "echo '' > /etc/apt/sources.list"
            sudo sh -c "cat $1 >> /etc/apt/sources.list"
            echo ""
            check_sources
        }
	 
        case "$vim_sources" in
            "M900")   update_sources "/usr/bin/kit_list/M900_list.txt" ;;
            "1042")   update_sources "/usr/bin/kit_list/1042_list.txt" ;;
            "1043")   update_sources "/usr/bin/kit_list/1043_list.txt" ;;
            "1050")   update_sources "/usr/bin/kit_list/105x_list.txt" ;;
            "1060")   update_sources "/usr/bin/kit_list/106x_list.txt" ;;
            "yes"|"y")
            sudo vim /etc/apt/sources.list
            sudo apt update
            ;;
        esac
        ;;

    "export")
       bash /usr/bin/kit_src/export_logs
	;;

    "dpkg")
       bash /usr/bin/kit_src/build_package
	;;
	
    "package")
       bash /usr/bin/kit_src/download_packages
	;;
    "dbus")
       bash /usr/bin/kit_src/dbus_interface
	;;
    "version")
       echo "脚本版本号：$SCRIPT_VERSION"
	;;
    "restart")
        echo "1:注销 2:重启 3:退出"
        read user_response

        while [[ ! $user_response =~ ^(1|2|3)$ ]]; do
             echo "请输入正确的选项：1 或 2 或 3"
             read user_response
        done

        if [[ "$user_response" == 1 ]]; then
             sudo systemctl restart lightdm.service
        elif [[ "$user_response" == 2 ]]; then
             sudo reboot
        else
             echo "操作完成！"
             exit 0
        fi
	;;
    "install")
        sudo dpkg -i *.deb

        # 检查上一个命令的退出状态
        if [ $? -ne 0 ]; then
           error_exit "安装失败，请查看错误信息。"
        fi
        uoskit restart
    ;;
	
   "activation")
       echo "将进行系统激活，请选择激活方式?(kms/https)"
       read -p "请输入您的选择：" activation_method

       while [[ ! $activation_method =~ ^(kms|k|https|h)$ ]]; do
          echo "请输入正确的选项：kms 或 https (k/h)"
          read -p "请输入您的选择：" activation_method
       done

       if [[ "$activation_method" =~ ^(k|kms)$ ]]; then
          uos-activator-cmd -s --kms kms.uniontech.com:8900:Vlc1cGIyNTBaV05v
          echo "已进行kms激活，请验证。"
       else
          uos-activator-cmd -s --https telicense.chinauos.com
          echo "已进行https激活，请验证。"
       fi

       ;;

    "ssh")
       cd /usr/bin/kit_src
       bash ./ssh_config
       ;;
    
    *)
       show_help
       error_exit
       ;;

esac

exit 0
